//! > no params

//! > test_runner_name
test_semantics

//! > setup_code

//! > function_code

//! > expression
set!()

//! > expected
Missing(
    ExprMissing {
        ty: <missing>,
    },
)

//! > semantic_diagnostics
error: Plugin diagnostic: Invalid arguments. Expected "(world, (models,))"
 --> lib.cairo:2:6
set!()
     ^

//! > ==========================================================================

//! > incorrect args

//! > test_runner_name
test_semantics

//! > setup_code

//! > function_code

//! > expression
set!(world)

//! > expected
Missing(
    ExprMissing {
        ty: <missing>,
    },
)

//! > semantic_diagnostics
error: Plugin diagnostic: Invalid arguments. Expected "(world, (models,))"
 --> lib.cairo:2:6
set!(world)
     ^***^

//! > ==========================================================================

//! > set successful expansion

//! > no_diagnostics
true

//! > test_runner_name
test_semantics

//! > setup_code
use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};

#[derive(Copy, Drop, Serde)]
#[dojo::model]
struct Health {
	#[key]
	id: u32,
	health: u16,
}

//! > function_code
let key: felt252 = 0xb0b;
let world = IWorldDispatcher{contract_address: 0x0.try_into().unwrap()};

//! > expression
set!(world, (Health{id: 0xb0b, health: 79}))

//! > expected
Block(
    ExprBlock {
        statements: [
            Expr(
                StatementExpr {
                    expr: Missing(
                        ExprMissing {
                            ty: <missing>,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > semantic_diagnostics
error: Plugin diagnostic: The model namespace '' can only contain characters (a-z/A-Z), digits (0-9) and underscore (_).
 --> lib.cairo:3:1
#[derive(Copy, Drop, Serde)]
^**************************^

error: Identifier not found.
 --> lib.cairo:12:1
set!(world, (Health{id: 0xb0b, health: 79}))
^******************************************^

warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:10:22
fn test_func() { let key: felt252 = 0xb0b;
                     ^*^

warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:11:5
let world = IWorldDispatcher{contract_address: 0x0.try_into().unwrap()}; {
    ^***^
